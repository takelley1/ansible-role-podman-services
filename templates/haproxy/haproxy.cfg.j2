{{ ansible_managed | comment }}
# /etc/opt/rh/rh-haproxy18/haproxy/haproxy.cfg
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # Log to stdout since we're in a container.
    log       stdout format raw local0 {{ haproxy_log_level }}
    pidfile   /var/run/haproxy.pid
    maxconn   1000
    user      root
    group     root
    daemon

#---------------------------------------------------------------------
# Common defaults that all the 'listen' and 'backend' sections will
#   use if not designated in their block.
#---------------------------------------------------------------------
defaults
    mode       http
    log        global
    balance    roundrobin
    option     httpchk GET /
    option     dontlognull
    option     http-server-close
    option     forwardfor except 127.0.0.0/8
    option     redispatch
    retries    3
    timeout    http-request    10s
    timeout    queue           1m
    timeout    connect         10s
    timeout    client          1m
    timeout    server          1m
    timeout    http-keep-alive 10s
    timeout    check           10s

#---------------------------------------------------------------------
# Frontend configuration
#---------------------------------------------------------------------

{% if haproxy_enable_stats -%}
frontend f_stats
    bind *:{{ haproxy_stats_port }}
    stats enable
    stats uri /
    stats refresh {{ haproxy_stats_refresh_interval }}
{% endif %}

frontend f_http
    bind *:{{ haproxy_http_port }}
    {% if haproxy_force_https -%}
    http-request redirect scheme https code 301 if !{ ssl_fc }
    {% endif %}

frontend f_https
    bind *:{{ haproxy_https_port }} ssl crt /usr/local/etc/haproxy/{{ haproxy_cert_filename }}

    acl home_assistant hdr_dom(host) -i homeassistant.{{ haproxy_subdomain }}.{{ domain }}
    {% if podman_deploy_home_assistant -%}
    {% endif -%}

    acl pihole hdr_dom(host) -i pihole.{{ haproxy_subdomain }}.{{ domain }}
    {% if podman_deploy_pihole -%}
    {% endif -%}

    use_backend b_home_assistant if home_assistant
    {% if podman_deploy_heimdall -%}
    {% endif -%}
    {% if podman_deploy_home_assistant -%}
    {% endif -%}

    {% if podman_deploy_pihole -%}
    use_backend b_{{ pihole_container_name }} if acl_pihole
    {% endif -%}

    {% if podman_deploy_heimdall -%}
    use_backend b_{{ heimdall_container_name }} if acl_heimdall
    {% endif -%}

    {% if haproxy_default_backend is defined -%}
    default_backend b_{{ haproxy_default_backend }}
    {% endif %}

#---------------------------------------------------------------------
# Backend configuration
#---------------------------------------------------------------------

backend b_heimdall
    server s1_{{ heimdall_container_name }} {{ heimdall_internal_ip }}:{{ heimdall_port }} check ssl verify none
{% if podman_deploy_heimdall -%}
{% endif %}

backend b_home_assistant
    server s1_{{ home_assistant_container_name }} {{ ansible_host }}:{{ home_assistant_port }} check
{% if podman_deploy_home_assistant -%}
{% endif %}

backend b_pihole
    server s1_{{ pihole_container_name }} {{ ansible_host }}:{{ pihole_port }} check
{% if podman_deploy_pihole -%}
{% endif %}
